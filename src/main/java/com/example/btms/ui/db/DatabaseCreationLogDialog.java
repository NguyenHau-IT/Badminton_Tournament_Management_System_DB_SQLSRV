package com.example.btms.ui.db;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.CompletableFuture;

/**
 * Dialog hi·ªÉn th·ªã log khi t·∫°o database m·ªõi
 */
public class DatabaseCreationLogDialog extends JDialog {
    private final JTextArea logArea;
    private final JScrollPane scrollPane;
    private final JButton closeButton;
    private final JProgressBar progressBar;
    private CompletableFuture<Void> creationTask;

    public DatabaseCreationLogDialog(Window parent, String dbName) {
        super(parent, "ƒêang t·∫°o database: " + dbName, ModalityType.APPLICATION_MODAL);

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        setLayout(new BorderLayout());

        // T·∫°o text area ƒë·ªÉ hi·ªÉn th·ªã log
        logArea = new JTextArea(20, 60);
        logArea.setEditable(false);
        logArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        logArea.setBackground(Color.BLACK);
        logArea.setForeground(Color.WHITE);

        scrollPane = new JScrollPane(logArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        add(scrollPane, BorderLayout.CENTER);

        // Panel ph√≠a d∆∞·ªõi v·ªõi progress bar v√† button
        JPanel bottomPanel = new JPanel(new BorderLayout());

        progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        progressBar.setString("ƒêang t·∫°o database...");
        progressBar.setStringPainted(true);
        bottomPanel.add(progressBar, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        closeButton = new JButton("ƒê√≥ng");
        closeButton.setEnabled(false); // Disable until completion
        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        buttonPanel.add(closeButton);
        bottomPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(bottomPanel, BorderLayout.SOUTH);

        pack();
        setLocationRelativeTo(parent);

        // Th√™m log ƒë·∫ßu ti√™n
        appendLog("üîÑ B·∫Øt ƒë·∫ßu t·∫°o database: " + dbName);
        appendLog("üìÅ Ki·ªÉm tra th∆∞ m·ª•c database...");
    }

    /**
     * Th√™m d√≤ng log m·ªõi
     */
    public void appendLog(String message) {
        SwingUtilities.invokeLater(() -> {
            logArea.append(message + "\n");
            logArea.setCaretPosition(logArea.getDocument().getLength());
        });
    }

    /**
     * B√°o ho√†n th√†nh th√†nh c√¥ng
     */
    public void markCompleted(boolean success) {
        SwingUtilities.invokeLater(() -> {
            progressBar.setIndeterminate(false);
            if (success) {
                progressBar.setValue(100);
                progressBar.setString("‚úÖ Ho√†n th√†nh th√†nh c√¥ng");
                progressBar.setForeground(new Color(46, 204, 113));
                appendLog("");
                appendLog("‚úÖ Database ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
                appendLog("üí° B·∫°n c√≥ th·ªÉ ƒë√≥ng c·ª≠a s·ªï n√†y v√† ch·ªçn 'S·ª≠ d·ª•ng local / m·∫°ng LAN' ƒë·ªÉ k·∫øt n·ªëi.");
            } else {
                progressBar.setValue(0);
                progressBar.setString("‚ùå T·∫°o database th·∫•t b·∫°i");
                progressBar.setForeground(new Color(231, 76, 60));
                appendLog("");
                appendLog("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o database!");
            }
            closeButton.setEnabled(true);
        });
    }

    /**
     * Set task ƒë·ªÉ c√≥ th·ªÉ cancel n·∫øu c·∫ßn
     */
    public void setCreationTask(CompletableFuture<Void> task) {
        this.creationTask = task;
    }
}