package com.example.btms.ui.screenshot;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

// UDP receive disabled per requirement: read images from local folder only
import com.example.btms.util.ui.ButtonFactory;

/**
 * Tab ƒë·ªÉ hi·ªÉn th·ªã screenshot t·ª´ c√°c client
 */
public class ScreenshotTab extends JPanel {

    private JPanel historyScreenshotPanel; // Panel cho ·∫£nh l·ªãch s·ª≠
    private JTextArea logArea;

    public ScreenshotTab() {
        setLayout(new BorderLayout(10, 10));
        // Kh·ªüi t·∫°o UI v√† load ·∫£nh l·ªãch s·ª≠
        buildUI();
        SwingUtilities.invokeLater(() -> loadHistoryScreenshots());
    }

    private void buildUI() {
        // Header v·ªõi controls
        // T·∫°o tabbed pane ch·ªâ cho ph·∫ßn l·ªãch s·ª≠ ·∫£nh t·ª´ th∆∞ m·ª•c
        JTabbedPane tabbedPane = new JTabbedPane();

        // Tab 3: ·∫¢nh c√°c tr·∫≠n ƒë√£ thi ƒë·∫•u t·ª´ folder screenshots
        JPanel historyTab = new JPanel(new BorderLayout());
        historyTab.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Panel cho ·∫£nh l·ªãch s·ª≠
        historyScreenshotPanel = new JPanel(new GridLayout(0, 3, 10, 10));
        historyScreenshotPanel.setBorder(BorderFactory.createTitledBorder("·∫¢nh c√°c tr·∫≠n ƒë√£ thi ƒë·∫•u"));

        // N√∫t refresh v√† controls
        JButton btnRefreshHistory = ButtonFactory.filled("üîÑ L√†m m·ªõi", new Color(155, 89, 182), Color.WHITE,
                new Dimension(150, 35), new Font("SansSerif", Font.BOLD, 14));
        btnRefreshHistory.addActionListener(e -> loadHistoryScreenshots());

        JButton btnOpenFolder = ButtonFactory.outlined("üìÅ M·ªü th∆∞ m·ª•c", new Color(46, 204, 113), new Dimension(150, 35),
                new Font("SansSerif", Font.BOLD, 14));
        btnOpenFolder.addActionListener(e -> openScreenshotsFolder());

        // Th√™m: Ch·ªçn t·∫•t c·∫£ / B·ªè ch·ªçn / X√≥a ƒë√£ ch·ªçn
        JButton btnSelectAll = ButtonFactory.outlined("‚úì Ch·ªçn t·∫•t c·∫£", new Color(33, 150, 243), new Dimension(140, 35),
                new Font("SansSerif", Font.BOLD, 12));
        btnSelectAll.addActionListener(e -> selectAllHistory(true));

        JButton btnClearSelection = ButtonFactory.outlined("‚úï B·ªè ch·ªçn", new Color(158, 158, 158),
                new Dimension(120, 35),
                new Font("SansSerif", Font.BOLD, 12));
        btnClearSelection.addActionListener(e -> selectAllHistory(false));

        JButton btnDeleteSelected = ButtonFactory.filled("üóëÔ∏è X√≥a ƒë√£ ch·ªçn", new Color(244, 67, 54), Color.WHITE,
                new Dimension(150, 35), new Font("SansSerif", Font.BOLD, 12));
        btnDeleteSelected.addActionListener(e -> deleteSelectedHistory());

        JPanel historyControls = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        historyControls.setOpaque(false);
        historyControls.add(btnRefreshHistory);
        historyControls.add(btnOpenFolder);
        historyControls.add(btnSelectAll);
        historyControls.add(btnClearSelection);
        historyControls.add(btnDeleteSelected);

        historyTab.add(historyControls, BorderLayout.NORTH);

        JScrollPane historyScrollPane = new JScrollPane(historyScreenshotPanel);
        historyScrollPane.getVerticalScrollBar().setUnitIncrement(48);
        historyScrollPane.getViewport().setScrollMode(javax.swing.JViewport.BACKINGSTORE_SCROLL_MODE);
        historyScrollPane.setPreferredSize(new Dimension(800, 500));
        historyTab.add(historyScrollPane, BorderLayout.CENTER);

        // Th√™m tab l·ªãch s·ª≠
        tabbedPane.addTab("üìö L·ªãch s·ª≠ tr·∫≠n ƒë·∫•u", new ImageIcon(), historyTab);

        // Log area
        logArea = new JTextArea();
        logArea.setEditable(false);
        logArea.setFont(new Font("Monospaced", Font.PLAIN, 11));
        logArea.setRows(8);

        JScrollPane logScrollPane = new JScrollPane(logArea);
        logScrollPane.setBorder(BorderFactory.createTitledBorder("Log ho·∫°t ƒë·ªông"));
        add(tabbedPane, BorderLayout.CENTER);
        add(logScrollPane, BorderLayout.SOUTH);

    }

    private void log(String message) {
        SwingUtilities.invokeLater(() -> {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String timestamp = sdf.format(new Date());
            logArea.append("[" + timestamp + "] " + message + "\n");
            logArea.setCaretPosition(logArea.getDocument().getLength());
        });
    }

    public void cleanup() {
        // No background receiver anymore
    }

    /**
     * Load ·∫£nh t·ª´ folder screenshots
     */
    private void loadHistoryScreenshots() {
        try {
            // X√≥a panel c≈©
            historyScreenshotPanel.removeAll();

            // ƒê∆∞·ªùng d·∫´n ƒë·∫øn folder screenshots
            File screenshotsFolder = new File("screenshots");
            if (!screenshotsFolder.exists()) {
                screenshotsFolder.mkdirs();
                log("ƒê√£ t·∫°o th∆∞ m·ª•c screenshots");
                return;
            }

            // L·∫•y danh s√°ch file ·∫£nh
            File[] imageFiles = screenshotsFolder.listFiles((dir, name) -> name.toLowerCase().endsWith(".png") ||
                    name.toLowerCase().endsWith(".jpg") ||
                    name.toLowerCase().endsWith(".jpeg"));

            if (imageFiles == null || imageFiles.length == 0) {
                log("Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c screenshots");
                return;
            }

            // S·∫Øp x·∫øp theo th·ªùi gian s·ª≠a ƒë·ªïi (m·ªõi nh·∫•t tr∆∞·ªõc)
            java.util.Arrays.sort(imageFiles, (f1, f2) -> Long.compare(f2.lastModified(), f1.lastModified()));

            int loadedCount = 0;
            for (File imageFile : imageFiles) {
                try {
                    BufferedImage image = ImageIO.read(imageFile);
                    if (image != null) {
                        // T·∫°o th√¥ng tin file
                        String fileName = imageFile.getName();
                        String fileSize = String.format("%.1f KB", imageFile.length() / 1024.0);
                        String lastModified = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
                                .format(new Date(imageFile.lastModified()));

                        String fileInfo = String.format("File: %s\nK√≠ch th∆∞·ªõc: %s\nC·∫≠p nh·∫≠t: %s",
                                fileName, fileSize, lastModified);

                        // T·∫°o item hi·ªÉn th·ªã
                        HistoryScreenshotItem item = new HistoryScreenshotItem(fileName, fileInfo, image, imageFile);
                        historyScreenshotPanel.add(item);
                        loadedCount++;
                    }
                } catch (java.io.IOException e) {
                    log("Kh√¥ng th·ªÉ ƒë·ªçc file: " + imageFile.getName() + " - " + e.getMessage());
                }
            }

            // C·∫≠p nh·∫≠t layout
            historyScreenshotPanel.revalidate();
            historyScreenshotPanel.repaint();

            log("ƒê√£ load " + loadedCount + " ·∫£nh t·ª´ th∆∞ m·ª•c screenshots");

        } catch (RuntimeException e) {
            log("L·ªói khi load ·∫£nh l·ªãch s·ª≠: " + e.getMessage());
        }
    }

    // ƒê√°nh d·∫•u ch·ªçn/b·ªè ch·ªçn t·∫•t c·∫£ ·∫£nh l·ªãch s·ª≠
    private void selectAllHistory(boolean selected) {
        for (int i = 0; i < historyScreenshotPanel.getComponentCount(); i++) {
            java.awt.Component c = historyScreenshotPanel.getComponent(i);
            if (c instanceof HistoryScreenshotItem item) {
                item.setSelected(selected);
            }
        }
        historyScreenshotPanel.repaint();
    }

    // X√≥a c√°c ·∫£nh ƒë√£ ch·ªçn
    private void deleteSelectedHistory() {
        java.util.List<HistoryScreenshotItem> toDelete = new java.util.ArrayList<>();
        for (int i = 0; i < historyScreenshotPanel.getComponentCount(); i++) {
            java.awt.Component c = historyScreenshotPanel.getComponent(i);
            if (c instanceof HistoryScreenshotItem item) {
                if (item.isSelected())
                    toDelete.add(item);
            }
        }
        if (toDelete.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ch∆∞a ch·ªçn ·∫£nh n√†o ƒë·ªÉ x√≥a.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this,
                "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a " + toDelete.size() + " ·∫£nh ƒë√£ ch·ªçn?",
                "X√°c nh·∫≠n x√≥a", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm != JOptionPane.YES_OPTION)
            return;

        int ok = 0, fail = 0;
        for (HistoryScreenshotItem item : toDelete) {
            try {
                File f = item.getImageFile();
                if (f != null && f.exists() && f.delete()) {
                    historyScreenshotPanel.remove(item);
                    ok++;
                } else {
                    fail++;
                }
            } catch (Exception ex) {
                fail++;
            }
        }
        historyScreenshotPanel.revalidate();
        historyScreenshotPanel.repaint();
        JOptionPane.showMessageDialog(this,
                "ƒê√£ x√≥a: " + ok + (fail > 0 ? (", th·∫•t b·∫°i: " + fail) : ""),
                "K·∫øt qu·∫£", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * M·ªü th∆∞ m·ª•c screenshots
     */
    private void openScreenshotsFolder() {
        try {
            File screenshotsFolder = new File("screenshots");
            if (!screenshotsFolder.exists()) {
                screenshotsFolder.mkdirs();
            }

            // M·ªü th∆∞ m·ª•c b·∫±ng file explorer c·ªßa h·ªá ƒëi·ªÅu h√†nh
            if (java.awt.Desktop.isDesktopSupported()) {
                java.awt.Desktop.getDesktop().open(screenshotsFolder);
                log("ƒê√£ m·ªü th∆∞ m·ª•c screenshots");
            } else {
                log("Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c screenshots (Desktop kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£)");
            }
        } catch (java.io.IOException | SecurityException e) {
            log("L·ªói khi m·ªü th∆∞ m·ª•c screenshots: " + e.getMessage());
        }
    }

    // ƒê√£ b·ªè t√≠nh nƒÉng admin t·ª± ch·ª•p

    // Panel bo g√≥c v·∫Ω n·ªÅn + vi·ªÅn ƒë·ªÉ giao di·ªán m·ªÅm m·∫°i h∆°n
    private static class RoundedPanel extends JPanel {
        private final int radius;
        private final Color bgColor;
        private final Color borderColor;

        public RoundedPanel() {
            this(12, new Color(250, 250, 250), new Color(220, 220, 220));
        }

        public RoundedPanel(int radius, Color bgColor, Color borderColor) {
            this.radius = Math.max(4, radius);
            this.bgColor = bgColor;
            this.borderColor = borderColor;
            setOpaque(false);
        }

        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g.create();
            try {
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                int w = getWidth();
                int h = getHeight();
                // Fill background rounded rect
                g2.setColor(bgColor);
                g2.fill(new RoundRectangle2D.Float(0, 0, w - 1, h - 1, radius, radius));
                // Border
                g2.setColor(borderColor);
                g2.draw(new RoundRectangle2D.Float(0.5f, 0.5f, w - 1, h - 1, radius, radius));
            } finally {
                g2.dispose();
            }
            super.paintComponent(g);
        }
    }

    /**
     * Component ƒë·ªÉ hi·ªÉn th·ªã m·ªôt screenshot
     */
    // ƒê√£ b·ªè ScreenshotItem v√¨ kh√¥ng c√≤n panel admin/client

    /**
     * Component ƒë·ªÉ hi·ªÉn th·ªã m·ªôt ·∫£nh l·ªãch s·ª≠ t·ª´ folder screenshots
     */
    private static class HistoryScreenshotItem extends RoundedPanel {
        private final BufferedImage image;
        private final File imageFile;
        private final javax.swing.JCheckBox selectBox = new javax.swing.JCheckBox();

        public HistoryScreenshotItem(String fileName, String fileInfo, BufferedImage image, File imageFile) {
            this.image = image;
            this.imageFile = imageFile;

            setLayout(new BorderLayout(6, 6));
            setBorder(new EmptyBorder(8, 8, 8, 8));

            // Hi·ªÉn th·ªã ·∫£nh v·ªõi t·ª∑ l·ªá ƒë√∫ng
            ImageIcon icon = new ImageIcon(this.image);

            // T√≠nh to√°n k√≠ch th∆∞·ªõc m·ªõi gi·ªØ nguy√™n t·ª∑ l·ªá
            int maxWidth = 250;
            int maxHeight = 200;
            int originalWidth = this.image.getWidth();
            int originalHeight = this.image.getHeight();

            double scaleX = (double) maxWidth / originalWidth;
            double scaleY = (double) maxHeight / originalHeight;
            double scale = Math.min(scaleX, scaleY); // L·∫•y t·ª∑ l·ªá nh·ªè h∆°n ƒë·ªÉ gi·ªØ nguy√™n t·ª∑ l·ªá

            int newWidth = (int) (originalWidth * scale);
            int newHeight = (int) (originalHeight * scale);

            Image scaledImage = icon.getImage().getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            JLabel imageLabel = new JLabel(new ImageIcon(scaledImage));
            imageLabel.setHorizontalAlignment(JLabel.CENTER);

            // Th√¥ng tin file (kh·ªüi t·∫°o tr∆∞·ªõc ƒë·ªÉ t√°i s·ª≠ d·ª•ng)
            JTextArea infoArea = new JTextArea();
            infoArea.setText(fileInfo);
            infoArea.setEditable(false);
            infoArea.setLineWrap(true);
            infoArea.setWrapStyleWord(true);
            infoArea.setRows(3);
            infoArea.setFont(new Font("Monospaced", Font.PLAIN, 10));

            // Thanh tr√™n: checkbox ch·ªçn + ti√™u ƒë·ªÅ + n√∫t m·ªü file
            JButton btnOpen = new JButton("üìÇ M·ªü file");
            btnOpen.setPreferredSize(new Dimension(100, 25));
            btnOpen.addActionListener(e -> openImageFile());

            JPanel topBar = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 4));
            topBar.setOpaque(false);
            JLabel title = new JLabel(fileName);
            title.setFont(title.getFont().deriveFont(Font.BOLD));
            topBar.add(selectBox);
            topBar.add(title);
            topBar.add(btnOpen);

            add(topBar, BorderLayout.NORTH);
            add(imageLabel, BorderLayout.CENTER);

            // Th√™m th√¥ng tin file ·ªü d∆∞·ªõi c√πng
            add(infoArea, BorderLayout.SOUTH);
        }

        private void openImageFile() {
            try {
                if (java.awt.Desktop.isDesktopSupported()) {
                    java.awt.Desktop.getDesktop().open(imageFile);
                }
            } catch (java.io.IOException | SecurityException e) {
                System.err.println("Kh√¥ng th·ªÉ m·ªü file: " + e.getMessage());
            }
        }

        public boolean isSelected() {
            return selectBox.isSelected();
        }

        public void setSelected(boolean b) {
            selectBox.setSelected(b);
        }

        public File getImageFile() {
            return imageFile;
        }
    }

}
