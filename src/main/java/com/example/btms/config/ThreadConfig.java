package com.example.btms.config;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import jakarta.annotation.PreDestroy;

/**
 * üöÄ Java 21 Enhanced Thread Management Configuration
 * 
 * T·∫≠n d·ª•ng Virtual Threads (Project Loom) cho hi·ªáu nƒÉng t·ªët h∆°n
 * v√† qu·∫£n l√Ω thread pool centralized
 */
@Configuration
public class ThreadConfig {

    private static final Logger log = LoggerFactory.getLogger(ThreadConfig.class);

    // Virtual Thread Executors (Java 21 feature)
    private ExecutorService virtualThreadExecutor;
    private ExecutorService ioIntensiveExecutor;
    private ExecutorService cpuIntensiveExecutor;
    private ScheduledExecutorService scheduledExecutor;

    /**
     * üåü Enhanced Thread Executor
     * T·ªëi ∆∞u cho c√°c t√°c v·ª• I/O intensive v√† SSE broadcasting
     */
    @Bean(name = "virtualThreadExecutor")
    public ExecutorService virtualThreadExecutor() {
        log.info("üöÄ Creating Enhanced Thread Executor (Java 21 optimized)");
        // S·ª≠ d·ª•ng cached thread pool v·ªõi custom factory cho flexibility t·ªët h∆°n
        this.virtualThreadExecutor = Executors.newCachedThreadPool(
                new NamedThreadFactory("Enhanced"));
        return this.virtualThreadExecutor;
    }

    /**
     * üîÑ I/O Intensive Thread Pool
     * Cho database operations, file I/O, network requests
     */
    @Bean(name = "ioIntensiveExecutor")
    public ExecutorService ioIntensiveExecutor() {
        log.info("üíæ Creating I/O Intensive Thread Pool");
        this.ioIntensiveExecutor = Executors.newFixedThreadPool(
                Math.max(8, Runtime.getRuntime().availableProcessors() * 2),
                new NamedThreadFactory("IO-Intensive"));
        return this.ioIntensiveExecutor;
    }

    /**
     * ‚ö° CPU Intensive Thread Pool
     * Cho PDF generation, image processing, calculations
     */
    @Bean(name = "cpuIntensiveExecutor")
    public ExecutorService cpuIntensiveExecutor() {
        int cores = Runtime.getRuntime().availableProcessors();
        log.info("üßÆ Creating CPU Intensive Thread Pool with {} threads", cores);
        this.cpuIntensiveExecutor = Executors.newFixedThreadPool(
                cores,
                new NamedThreadFactory("CPU-Intensive"));
        return this.cpuIntensiveExecutor;
    }

    /**
     * ‚è∞ Scheduled Task Executor
     * Cho periodic tasks, timeouts, cleanup operations
     */
    @Bean(name = "scheduledExecutor")
    public ScheduledExecutorService scheduledExecutor() {
        log.info("‚è∞ Creating Scheduled Executor Service");
        this.scheduledExecutor = Executors.newScheduledThreadPool(
                4,
                new NamedThreadFactory("Scheduled"));
        return this.scheduledExecutor;
    }

    /**
     * üßµ Custom Thread Factory v·ªõi naming pattern
     */
    private static class NamedThreadFactory implements ThreadFactory {
        private final AtomicInteger threadNumber = new AtomicInteger(1);
        private final String namePrefix;

        public NamedThreadFactory(String namePrefix) {
            this.namePrefix = "BTMS-" + namePrefix + "-";
        }

        @Override
        public Thread newThread(Runnable r) {
            Thread t = new Thread(r, namePrefix + threadNumber.getAndIncrement());
            t.setDaemon(true);
            t.setPriority(Thread.NORM_PRIORITY);
            return t;
        }
    }

    /**
     * üßπ Cleanup resources khi shutdown
     */
    @PreDestroy
    public void cleanup() {
        log.info("üßπ Shutting down thread pools...");

        if (virtualThreadExecutor != null && !virtualThreadExecutor.isShutdown()) {
            virtualThreadExecutor.shutdown();
            log.info("‚úÖ Virtual Thread Executor shut down");
        }

        if (ioIntensiveExecutor != null && !ioIntensiveExecutor.isShutdown()) {
            ioIntensiveExecutor.shutdown();
            log.info("‚úÖ I/O Intensive Executor shut down");
        }

        if (cpuIntensiveExecutor != null && !cpuIntensiveExecutor.isShutdown()) {
            cpuIntensiveExecutor.shutdown();
            log.info("‚úÖ CPU Intensive Executor shut down");
        }

        if (scheduledExecutor != null && !scheduledExecutor.isShutdown()) {
            scheduledExecutor.shutdown();
            log.info("‚úÖ Scheduled Executor shut down");
        }
    }

    /**
     * üìä Utility method ƒë·ªÉ log thread pool status
     */
    public void logThreadPoolStatus() {
        log.info("üìä Thread Pool Status:");
        log.info("  - Available processors: {}", Runtime.getRuntime().availableProcessors());
        log.info("  - Virtual Thread Executor: {}",
                virtualThreadExecutor != null ? "Active" : "Not initialized");
        log.info("  - I/O Intensive Pool: {}",
                ioIntensiveExecutor != null && !ioIntensiveExecutor.isShutdown() ? "Active" : "Inactive");
        log.info("  - CPU Intensive Pool: {}",
                cpuIntensiveExecutor != null && !cpuIntensiveExecutor.isShutdown() ? "Active" : "Inactive");
        log.info("  - Scheduled Pool: {}",
                scheduledExecutor != null && !scheduledExecutor.isShutdown() ? "Active" : "Inactive");
    }
}