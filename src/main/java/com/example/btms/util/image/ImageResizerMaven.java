package com.example.btms.util.image;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Maven version c·ªßa c√¥ng c·ª• resize ·∫£nh
 * C√≥ th·ªÉ ch·∫°y tr·ª±c ti·∫øp t·ª´ Maven project
 */
public class ImageResizerMaven {

    private static final String SOURCE_IMAGE = "avatar.png";
    private static final String OUTPUT_PREFIX = "app-";
    private static final String OUTPUT_EXTENSION = ".png";

    // C√°c k√≠ch th∆∞·ªõc c·∫ßn t·∫°o
    private static final int[] SIZES = { 16, 32, 48, 64, 128, 256 };

    public static void main(String[] args) {
        try {
            ImageResizerMaven resizer = new ImageResizerMaven();
            resizer.resizeAllImages();
            System.out.println("‚úÖ ƒê√£ resize th√†nh c√¥ng t·∫•t c·∫£ ·∫£nh!");
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi resize ·∫£nh: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Resize t·∫•t c·∫£ ·∫£nh sang c√°c k√≠ch th∆∞·ªõc kh√°c nhau
     */
    public void resizeAllImages() throws IOException {
        // L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c icons
        Path iconsPath = getIconsPath();
        File sourceFile = iconsPath.resolve(SOURCE_IMAGE).toFile();

        if (!sourceFile.exists()) {
            throw new IOException("Kh√¥ng t√¨m th·∫•y file ngu·ªìn: " + sourceFile.getAbsolutePath());
        }

        // ƒê·ªçc ·∫£nh g·ªëc
        BufferedImage sourceImage = ImageIO.read(sourceFile);
        System.out.println("üìñ ƒê√£ ƒë·ªçc ·∫£nh g·ªëc: " + sourceFile.getAbsolutePath());
        System.out.println("üìè K√≠ch th∆∞·ªõc g·ªëc: " + sourceImage.getWidth() + "x" + sourceImage.getHeight());

        // Resize cho t·ª´ng k√≠ch th∆∞·ªõc
        for (int size : SIZES) {
            resizeImage(sourceImage, iconsPath, size);
        }
    }

    /**
     * Resize ·∫£nh sang k√≠ch th∆∞·ªõc c·ª• th·ªÉ
     */
    private void resizeImage(BufferedImage source, Path outputPath, int size) throws IOException {
        // T·∫°o ·∫£nh m·ªõi v·ªõi k√≠ch th∆∞·ªõc mong mu·ªën
        BufferedImage resized = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);

        // V·∫Ω ·∫£nh g·ªëc l√™n ·∫£nh m·ªõi v·ªõi k√≠ch th∆∞·ªõc m·ªõi
        Graphics2D g2d = resized.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2d.drawImage(source, 0, 0, size, size, null);
        g2d.dispose();

        // T·∫°o t√™n file output
        String outputFileName = OUTPUT_PREFIX + size + OUTPUT_EXTENSION;
        File outputFile = outputPath.resolve(outputFileName).toFile();

        // L∆∞u ·∫£nh
        ImageIO.write(resized, "PNG", outputFile);
        System.out.println("üíæ ƒê√£ t·∫°o: " + outputFileName + " (" + size + "x" + size + ")");
    }

    /**
     * L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c icons
     */
    private Path getIconsPath() {
        // T√¨m th∆∞ m·ª•c icons t·ª´ classpath
        try {
            // Th·ª≠ t√¨m t·ª´ resources
            String resourcePath = "/icons/" + SOURCE_IMAGE;
            if (getClass().getResource(resourcePath) != null) {
                // N·∫øu ch·∫°y t·ª´ JAR, l·∫•y th∆∞ m·ª•c hi·ªán t·∫°i
                return Paths.get("src/main/resources/icons");
            }
        } catch (Exception e) {
            // Ignore
        }

        // Fallback: th∆∞ m·ª•c hi·ªán t·∫°i
        return Paths.get("src/main/resources/icons");
    }

    /**
     * Resize ·∫£nh v·ªõi k√≠ch th∆∞·ªõc t√πy ch·ªânh
     */
    public void resizeImage(String sourcePath, String outputPath, int width, int height) throws IOException {
        File sourceFile = new File(sourcePath);
        if (!sourceFile.exists()) {
            throw new IOException("Kh√¥ng t√¨m th·∫•y file ngu·ªìn: " + sourcePath);
        }

        BufferedImage sourceImage = ImageIO.read(sourceFile);
        BufferedImage resized = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = resized.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2d.drawImage(sourceImage, 0, 0, width, height, null);
        g2d.dispose();

        File outputFile = new File(outputPath);
        ImageIO.write(resized, "PNG", outputFile);
        System.out.println("‚úÖ ƒê√£ resize ·∫£nh th√†nh c√¥ng: " + outputPath);
    }
}
